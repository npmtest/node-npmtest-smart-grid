{"/home/travis/build/npmtest/node-npmtest-smart-grid/test.js":"/* istanbul instrument in package npmtest_smart_grid */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-smart-grid/lib.npmtest_smart_grid.js":"/* istanbul instrument in package npmtest_smart_grid */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_smart_grid = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_smart_grid = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-smart-grid/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-smart-grid && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_smart_grid */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_smart_grid\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_smart_grid.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_smart_grid.rollup.js'] =\n            local.assetsDict['/assets.npmtest_smart_grid.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_smart_grid.__dirname + '/lib.npmtest_smart_grid.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-smart-grid/node_modules/smart-grid/index.js":"module.exports = function (dest, options) {\r\n    try {\r\n        var root = __dirname;\r\n        var fs = require('fs');\r\n\r\n        var jsonSettings = fs.readFileSync(root + '/defaults/settings.json');\r\n        var defaults = JSON.parse(jsonSettings);\r\n\r\n        var innerMerge = {\r\n            container: true,\r\n            breakPoints: false,\r\n            mixinNames: true\r\n        };\r\n\r\n        if (typeof options !== \"object\") {\r\n            options = defaults;\r\n        } else {\r\n            for (var key in defaults) {\r\n                if (typeof (options[key]) === \"undefined\") {\r\n                    options[key] = defaults[key];\r\n                } \r\n                else if (typeof options[key] === \"object\" && innerMerge[key]) {\r\n                    for (var k in defaults[key]) {\r\n                        if (typeof (options[key][k]) === \"undefined\") {\r\n                            options[key][k] = defaults[key][k];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var patterns = {};\r\n        patterns.mixin = fs.readFileSync(root + '/system/patterns/minix');\r\n        patterns.clearfix = fs.readFileSync(root + '/system/patterns/clearfix');\r\n        patterns.reset = fs.readFileSync(root + '/system/patterns/reset');\r\n        patterns.debug = fs.readFileSync(root + '/system/patterns/debug');\r\n\r\n        var build = require('./build.js');\r\n        var res = build(options, patterns);\r\n\r\n        if (dest === undefined) {\r\n            console.log('It`s test mode, because you don`t set destination folder');\r\n        } else {\r\n            var buildFile = dest + '/' + options.filename + '.' + res.type;\r\n            fs.writeFileSync(buildFile, res.grid);\r\n            console.log('Grid placed into ' + buildFile);\r\n        }\r\n\r\n        console.log('Grid length is ' + res.grid.length + ' :)');\r\n        console.log(\"Its work! Good day!\");\r\n    } catch (err) {\r\n        console.log(\"Oops -> \" + err);\r\n    }\r\n}","/home/travis/build/npmtest/node-npmtest-smart-grid/node_modules/smart-grid/system/base.js":"function Base(resources) {\r\n    this.resources = resources;\r\n\r\n    var offset = this.resources.helpers.parseUnit(this.resources.settings.offset);\r\n\r\n    this.content = {\r\n        row: {\r\n            display: \"flex\",\r\n            'flex-wrap': \"wrap\",\r\n            'margin-left': \"({{var}}offset_one_side * -1)\",\r\n            'margin-right': \"({{var}}offset_one_side * -1)\"\r\n        },\r\n        rowFloat: {\r\n            'margin-left': \"({{var}}offset_one_side * -1)\",\r\n            'margin-right': \"({{var}}offset_one_side * -1)\",\r\n            '{{call}}clearfix()': null,\r\n        },\r\n        column: {\r\n            'box-sizing': \"border-box\",\r\n            'margin-left': \"{{var}}offset_one_side\",\r\n            'margin-right': \"{{var}}offset_one_side\",\r\n            'word-wrap': \"break-word\"\r\n        },\r\n        columnFloat: {\r\n            'float': 'left'\r\n        },\r\n        columnPadding: {\r\n            'padding-left': \"{{var}}offset_one_side\",\r\n            'padding-right': \"{{var}}offset_one_side\",\r\n            'word-wrap': \"break-word\"\r\n        }\r\n    };\r\n}\r\n\r\nBase.prototype.render = function () {\r\n    var out = \"\";\r\n\r\n    var container = {\r\n        'max-width': this.resources.settings.container.maxWidth,\r\n        'padding-left': this.resources.settings.container.fields,\r\n        'padding-right': this.resources.settings.container.fields,\r\n        margin: \"0 auto\"\r\n    };\r\n\r\n    var wrapAndMixinWrap = '';\r\n\r\n    var cont = this.resources.styles.objToStyles(container, 1);\r\n    var media = new this.resources.mediaQuery.gen();\r\n    wrapAndMixinWrap += media.wrap(cont);\r\n\r\n    for (var name in this.resources.settings.breakPoints) {\r\n        var point = this.resources.settings.breakPoints[name];\r\n        var media = new this.resources.mediaQuery.gen(\"{{var}}break_\" + name);\r\n        \r\n        var containerMedia = {\r\n            'padding-left': point.fields,\r\n            'padding-right': point.fields\r\n        };\r\n        \r\n        var cont = this.resources.styles.objToStyles(containerMedia);\r\n        wrapAndMixinWrap += \"\\n\\n\" + media.wrap(cont, 1);\r\n    }\r\n\r\n    var mixinWrapper = new this.resources.mixin.create(this.resources.patterns.mixin, this.resources.settings.mixinNames.container, '', wrapAndMixinWrap);\r\n    out += mixinWrapper.render(this.resources.settings.outputStyle) + '\\n';\r\n    \r\n    for (var name in this.resources.settings.mixinNames) {\r\n        if(this.content[name] !== undefined){\r\n            var selector = this.resources.settings.mixinNames[name];\r\n            var styles = this.resources.styles.objToStyles(this.content[name], 1);\r\n            var media = new this.resources.mediaQuery.gen();\r\n            var mixin = new this.resources.mixin.create(this.resources.patterns.mixin, selector, '', media.wrap(styles));\r\n\r\n            out += mixin.render() + '\\n';\r\n        }\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\nmodule.exports.instance = Base;","/home/travis/build/npmtest/node-npmtest-smart-grid/node_modules/smart-grid/system/column.js":"function Column(resources, media, name, num) {\r\n    this.resources = resources;\r\n    this.media = media;\r\n    this.name = name + '-' + num;\r\n    this.offset = resources.settings.offset;\r\n    this.width = ((100 / resources.settings.columns) * num) + \"%\";\r\n}\r\n\r\nColumn.prototype.render = function () {\r\n    var width = '{{i}}' + this.resources.helpers.smartCalc(this.width, this.offset, '-') + '{{/i}}';\r\n    var style = this.resources.styles.objToStyles({width: width});\r\n    var mixin = new this.resources.mixin.create(this.resources.patterns.mixin, this.name, '', this.media.wrap(style, 1));\r\n    return mixin.render(this.resources.settings.outputStyle);\r\n};\r\n\r\nmodule.exports.gen = Column;","/home/travis/build/npmtest/node-npmtest-smart-grid/node_modules/smart-grid/system/helpers.js":"function Helpers(){\r\n    \r\n}\r\n\r\nHelpers.prototype.smartCalc = function(w, o, operation){\r\n    var output = \"\";\r\n    var width = this.parseUnit(w);\r\n    var offset = this.parseUnit(o);\r\n    \r\n    if(width.unit === offset.unit){\r\n        var value = this.math(width.value, offset.value, operation);\r\n        output = value + width.unit;\r\n    }\r\n    else{\r\n        output = 'calc(' + width.value + width.unit + ' ' + operation + ' {{string-var}}offset{{/string-var}})';\r\n    }\r\n    \r\n    return output;\r\n};\r\n\r\nHelpers.prototype.parseUnit = function(str){\r\n    var res = {};\r\n    \r\n    if(this.isPixel(str)){\r\n        res.value = str.substr(0, str.length - 2);\r\n        res.unit = 'px';\r\n    }\r\n    else if(this.isPercentage(str)){\r\n        res.value = str.substr(0, str.length - 1);\r\n        res.unit = '%';\r\n    }\r\n    else if(this.isRem(str)){\r\n        res.value = str.substr(0, str.length - 3);\r\n        res.unit = 'rem';\r\n    }\r\n    else{\r\n        throw new Error('what is \"' + str + '\" value? We use px, % and rem.');\r\n    }\r\n    \r\n    return res;\r\n}\r\n\r\nHelpers.prototype.isPixel = function(str){\r\n    return str.substr(-2) === 'px';\r\n}\r\n\r\nHelpers.prototype.isPercentage = function(str){\r\n    return str.substr(-1) === '%';\r\n}\r\n\r\nHelpers.prototype.isRem = function(str){\r\n    return str.substr(-3) === 'rem';\r\n}\r\n\r\nHelpers.prototype.math = function(a, b, op){\r\n    var res = null;\r\n    \r\n    switch(op){\r\n        case '+':\r\n            res = +a + b;\r\n            break;\r\n        case '-':\r\n            res = a - b;\r\n            break;\r\n        case '*':\r\n            res = a * b;\r\n            break;\r\n        case '/':\r\n            res = a / b;\r\n            break;\r\n    }\r\n    \r\n    return res;\r\n}\r\n\r\nmodule.exports.instance = Helpers;","/home/travis/build/npmtest/node-npmtest-smart-grid/node_modules/smart-grid/system/media.js":"function Media(breakPoint, device, condition) {\r\n    this.breakPoint = breakPoint || null;\r\n    this.device = device || 'screen';\r\n    this.condition = condition || 'max-width';\r\n}\r\n\r\nMedia.prototype.wrap = function (styles, left) {\r\n    var offset = left || 0;\r\n\r\n    var start = '';\r\n    var end = '';\r\n\r\n    if(this.breakPoint === null){\r\n        if(styles.lastIndexOf(\"\\n\") === styles.length - 1){\r\n            styles = styles.substr(0, styles.length - 1);\r\n        }\r\n    }\r\n    else{\r\n        start = this.left(offset) + \"@media \" + this.device + \" and (\" + this.condition + \": \" + this.breakPoint + \"){{brace}}\\n\";\r\n        end = this.left(offset) + \"{{/brace}}\";\r\n        offset++;\r\n    }\r\n\r\n    var tmp = styles.split(\"\\n\");\r\n    \r\n    for(var i = 0; i < tmp.length; i++){\r\n        if(tmp[i].length > 0){\r\n            tmp[i] = this.left(offset) + tmp[i];\r\n        }\r\n    }\r\n    \r\n    start += tmp.join(\"\\n\");\r\n    start += end;\r\n    return start;\r\n}\r\n\r\nMedia.prototype.left = function(val){\r\n    var str = '';\r\n    \r\n    for(var i = 0; i < val; i++){\r\n        str += '{{tab}}';\r\n    }\r\n    \r\n    return str;\r\n}\r\n\r\nmodule.exports.gen = Media;","/home/travis/build/npmtest/node-npmtest-smart-grid/node_modules/smart-grid/system/mixin.js":"function Mixin(pattern, name, params, content) {\r\n    this.pattern = pattern.toString();\r\n    this.name = name;\r\n    this.params = params;\r\n    this.content = content;    \r\n    \r\n    this.replaces = {\r\n        name: this.name,\r\n        params: this.params,\r\n        content: this.content\r\n    };\r\n}\r\n\r\nMixin.prototype.render = function(){\r\n    var out = this.pattern;\r\n    \r\n    for(var key in this.replaces){\r\n        out = out.replace('{{' + key + '}}', this.replaces[key]);\r\n    }\r\n    \r\n    return out;\r\n}\r\n\r\nmodule.exports.create = Mixin;","/home/travis/build/npmtest/node-npmtest-smart-grid/node_modules/smart-grid/system/offset.js":"function Offset(resources, media, name, direction) {\r\n    this.resources = resources;\r\n    this.media = media;\r\n    this.name = name;\r\n    this.offset = resources.settings.offset;\r\n    this.value = (100 / resources.settings.columns) + \"%\";\r\n    this.properties = [];\r\n    \r\n    switch(direction){\r\n        case 'left':\r\n            this.properties.push('margin-left');\r\n            break;\r\n        case 'right':\r\n            this.properties.push('margin-right');\r\n            break;\r\n        case 'same':\r\n            this.properties.push('margin-left');\r\n            this.properties.push('margin-right');\r\n            break;\r\n        case 'left-padding':\r\n            this.properties.push('padding-left');\r\n            break;\r\n        case 'right-padding':\r\n            this.properties.push('padding-right');\r\n            break;\r\n        case 'same-padding':\r\n            this.properties.push('padding-left');\r\n            this.properties.push('padding-right');\r\n            break;\r\n        default:\r\n            throw new Error('what is \"' + direction + '\" value? We use [left, right, same, left-padding, right-padding or same-padding] directions in offsets.');\r\n    }\r\n}\r\n\r\nOffset.prototype.render = function () {\r\n    var style = '{{var}}value{{=}}{{var}}atom * {{var}}n{{;}}\\n';\r\n   \r\n    for(var i = 0; i < this.properties.length; i++){\r\n        if(this.resources.helpers.isPercentage(this.offset)){\r\n            style += this.properties[i] + '{{:}}{{var}}value + {{var}}offset_one_side{{;}}\\n';\r\n        }\r\n        else{\r\n            style += this.properties[i] + '{{:}}{{i}}calc({{string-var}}value{{/string-var}} + {{string-var}}offset_one_side{{/string-var}}){{/i}}{{;}}\\n';\r\n        }\r\n    }\r\n\r\n    var mixin = new this.resources.mixin.create(this.resources.patterns.mixin, this.name, '{{var}}n', this.media.wrap(style, 1));\r\n    return mixin.render(this.resources.settings.outputStyle);\r\n};\r\n\r\nmodule.exports.gen = Offset;","/home/travis/build/npmtest/node-npmtest-smart-grid/node_modules/smart-grid/system/properties.js":"function Properties(resources) {\r\n    this.resources = resources;\r\n}\r\n\r\nProperties.prototype.render = function (media, name) {\r\n    var out = '';\r\n    var properties = this.resources.settings.properties;\r\n\r\n    var nameD = (name === '') ? '' : ('-' + name);\r\n\r\n    for (var i = 0; i < properties.length; i++) {\r\n        var styles = properties[i] + \"{{:}}{{var}}value{{;}}\\n\";\r\n        var mix = new this.resources.mixin.create(this.resources.patterns.mixin, properties[i] + nameD, '{{var}}value', media.wrap(styles, 1));\r\n        out += mix.render(this.resources.settings.outputStyle) + \"\\n\";\r\n    }\r\n    \r\n    if(name !== ''){\r\n        var styles = \"{{string-var}}name{{/string-var}}{{:}}{{var}}value{{;}}\\n\";\r\n        var mix = new this.resources.mixin.create(this.resources.patterns.mixin, name, '{{var}}name, {{var}}value', media.wrap(styles, 1));\r\n        out += mix.render(this.resources.settings.outputStyle) + \"\\n\";\r\n    }\r\n    \r\n    if(name !== ''){\r\n        var styles = \"{{block-content-extract}}{{;}}\\n\";\r\n        var mix = new this.resources.mixin.create(this.resources.patterns.mixin, name + '-block', '{{block-content-var}}', media.wrap(styles, 1));\r\n        out += mix.render(this.resources.settings.outputStyle) + \"\\n\";\r\n    }\r\n    \r\n    return out; \r\n}\r\n\r\nmodule.exports.instance = Properties;","/home/travis/build/npmtest/node-npmtest-smart-grid/node_modules/smart-grid/system/replaces.js":"function Replaces(resources) {\r\n    this.resources = resources;\r\n}\r\n\r\nReplaces.prototype.all = function(str, style){\r\n    var replaces = {\r\n        less: {\r\n            '{{var}}': '@',\r\n            '{{=}}': ': ',\r\n            '{{string-var}}': '@{',\r\n            '{{/string-var}}': '}',\r\n            '{{i}}': '~\"',\r\n            '{{/i}}': '\"',\r\n            '{{before_mixin}}': '.',\r\n            '{{call}}': '.',\r\n            '{{brace}}': '{',\r\n            '{{/brace}}': '}',\r\n            '{{:}}': ': ',\r\n            '{{;}}': ';',\r\n            '{{block-content-var}}': '@content',\r\n            '{{block-content-extract}}': '@content()'\r\n        },\r\n        scss: {\r\n            '{{var}}': '$',\r\n            '{{=}}': ': ',\r\n            '{{string-var}}': '#{$',\r\n            '{{/string-var}}': '}',\r\n            '{{i}}': '#{',\r\n            '{{/i}}': '}',\r\n            '{{before_mixin}}': '@mixin ',\r\n            '{{call}}': '@include ',\r\n            '{{brace}}': '{',\r\n            '{{/brace}}': '}',\r\n            '{{:}}': ': ',\r\n            '{{;}}': ';',\r\n            '{{block-content-var}}': '',\r\n            '{{block-content-extract}}': '@content'\r\n        },\r\n        styl: {\r\n            '{{var}}': '$',\r\n            '{{=}}': ' = ',\r\n            '{{string-var}}': '{$',\r\n            '{{/string-var}}': '}',\r\n            '{{i}}': 'iopen',\r\n            '{{/i}}': 'iclose',\r\n            '{{before_mixin}}': '',\r\n            '{{call}}': '',\r\n            '{{brace}}': '',\r\n            '{{/brace}}': '',\r\n            '{{:}}': ' ',\r\n            '{{;}}': '',\r\n            '{{block-content-var}}': 'content',\r\n            '{{block-content-extract}}': '{content}'\r\n        },\r\n        sass: {\r\n            '{{var}}': '$',\r\n            '{{=}}': ': ',\r\n            '{{string-var}}': '#{$',\r\n            '{{/string-var}}': '}',\r\n            '{{i}}': '#{',\r\n            '{{/i}}': '}',\r\n            '{{before_mixin}}': '=',\r\n            '{{call}}': '+',\r\n            '{{brace}}': '',\r\n            '{{/brace}}': '',\r\n            '{{:}}': ': ',\r\n            '{{;}}': '',\r\n            '{{block-content-var}}': '',\r\n            '{{block-content-extract}}': '@content'\r\n        }\r\n    };\r\n    \r\n    if(replaces[style] === undefined){\r\n        throw new Error(\"smartgrid doesn't have output style \\\"\" + style + \"\\\"\");\r\n    }\r\n    \r\n    var active = replaces[style];\r\n    active['{{tab}}'] = this.resources.settings.tab;\r\n    \r\n    var out = str;\r\n    \r\n    for(var key in active){\r\n        var tmp = out.split(key);\r\n        out = tmp.join(active[key]);\r\n    }\r\n    \r\n    if(style === 'styl'){\r\n        var pattern = new RegExp(replaces.styl['{{i}}'] + '(.+?)' + replaces.styl['{{/i}}'], 'g');\r\n        var pattern_var = new RegExp(\"\\{(.+?)\\}\", 'g');\r\n        \r\n        var ol = replaces.styl['{{i}}'].length;\r\n        var cl = replaces.styl['{{/i}}'].length;\r\n\r\n        out = out.replace(pattern, function (a){ \r\n            var clear = a.substr(ol, a.length - ol - cl);\r\n            var one = '';\r\n            var vars = [];\r\n\r\n            clear = clear.replace(pattern_var, function(a){\r\n                vars.push(a.substr(1, a.length - 2));\r\n                return '%s';\r\n            });\r\n            \r\n            one = '\"' + clear + '\" % (' + vars.join(' ') + ')'; \r\n            \r\n            return one;\r\n        });\r\n    }\r\n    \r\n    return out;\r\n}\r\n\r\nmodule.exports.instance = Replaces;","/home/travis/build/npmtest/node-npmtest-smart-grid/node_modules/smart-grid/system/styles.js":"function Styles() {\r\n\r\n}\r\n\r\nStyles.prototype.objToStyles = function (obj, left) {\r\n    var styles = '';\r\n    var offset = left || 0;\r\n\r\n    for (var propetry in obj) {\r\n        styles += this.left(offset) + propetry;\r\n\r\n        if (obj[propetry] !== null) {\r\n            styles += '{{:}}' + obj[propetry];\r\n        }\r\n\r\n        styles += \"{{;}}\\n\";\r\n    }\r\n    \r\n    return styles;\r\n};\r\n\r\nStyles.prototype.left = function(val){\r\n    var str = '';\r\n    \r\n    for(var i = 0; i < val; i++){\r\n        str += '{{tab}}';\r\n    }\r\n    \r\n    return str;\r\n}\r\n\r\nmodule.exports.instance = Styles;"}